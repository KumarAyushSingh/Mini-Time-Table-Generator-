#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Course {
public:
  string name;
  string teacher;
  bool available;

  Course() : name(""), teacher(""), available(true) {}

  Course(string name, string teacher, bool available = true) {
    this->name = name;
    this->teacher = teacher;
    this->available = available;
  }
};

bool isTeacherAvailable(vector<Course> timetable, string teacher, int day, int time) {
  for (Course course : timetable) {
    if (course.teacher == teacher) {
      return course.available;
    }
  }
  return true;
}

vector<Course> generateTimetable(vector<Course> courses, int numDays, int numTimeSlots) {
  vector<Course> timetable(numDays * numTimeSlots);
  int courseIndex = 0;

  for (int day = 0; day < numDays; day++) {
    for (int time = 0; time < numTimeSlots; time++) {
      while (!isTeacherAvailable(timetable, courses[courseIndex].teacher, day, time)) {
        courseIndex = (courseIndex + 1) % courses.size();
      }
      timetable[day * numTimeSlots + time] = courses[courseIndex];
      courseIndex = (courseIndex + 1) % courses.size();
    }
  }

  return timetable;
}

int main() {
  vector<Course> courses = {
    Course("Math", "Mr. Smith", true),
    Course("Science", "Mr. Johnson", true),
    Course("History", "Ms. Williams", true),
    Course("English", "Mr. Brown", true),
  };

  int numDays = 2;
  int numTimeSlots =3;

  vector<Course> timetable = generateTimetable(courses, numDays, numTimeSlots);

  for (int day = 0; day < numDays; day++) {
    cout << "Day " << day + 1 << endl;
    for (int time = 0; time < numTimeSlots; time++) {
      int index = day * numTimeSlots + time;
      cout << timetable[index].name << " (" << timetable[index].teacher << ")" << endl;
    }
    cout << endl;
  }

  return 0;
}
